-- More information about this file type:
-- https://drift.simonbinder.eu/docs/using-sql/moor_files/#getting-started

-- Import the data model (domain layer)
-- This model could also be auto-generated.
import 'package:learning_app/features/categories/models/category.dart';
import 'package:learning_app/features/categories/dtos/read_category_dto.dart';

-- Import converters
import 'package:learning_app/database/type_converters/color_converter.dart';

-- Import other entities this one depends on:
-- import 'package:learning_app/features/tasks/persistence/other.drift'

-- entity definition
-- This could also be done in Dart, but for people that are familiar with SQL and DDL, this
-- could be considered more elegant
-- 'MAPPED BY' is used to include custom converters that allow storing complex data types.
CREATE TABLE categories (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    color INT NOT NULL MAPPED BY `const ColorConverter()`
) WITH Category;

-- named queries and insert statements etc. :

-- For select * from ..., an object (or list) of the model-class is returned
-- For single-column queries, the type of the column is used
-- Otherwise, for a query "myQuery: ...", the resulting class is a generated "myQueryResult". It
-- also could be manually named like "myQuery AS MyResultClassName: ..."

getAllCategories:
SELECT  id,
        name,
        color
FROM categories;

deleteCatgoryById: DELETE FROM categories WHERE id = :id;

createCategory:
INSERT INTO categories(name, color)
VALUES (:name, :color);