-- More information about this file type:
-- https://drift.simonbinder.eu/docs/using-sql/moor_files/#getting-started

-- Import the data model (domain layer)
-- This model could also be auto-generated.
import 'package:learning_app/features/tasks/models/task.dart';

-- Import other entities this one depends on:
-- import 'package:learning_app/features/tasks/persistence/other.drift'

-- entity definition
-- This could also be done in Dart, but for people that are familiar with SQL and DDL, this
-- could be considered more elegant
CREATE TABLE tasks (
    id INT NOT NULL PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    done BOOLEAN NOT NULL DEFAULT false,
    description TEXT,
    estimated_time INT,
    due_date DATETIME NOT NULL,
    creation_date_time DATETIME NOT NULL,
    -- parrent_task_id TODO
    manual_time_effort_delta INT
) WITH Task;

-- TODO: add columns and an index on the due-date

-- named queries and insert statements etc. :

-- For select * from ..., an object (or list) of the model-class is returned
-- For single-column queries, the type of the column is used
-- Otherwise, for a query "myQuery: ...", the resulting class is a generated "myQueryResult". It
-- also could be manually named like "myQuery AS MyResultClassName: ..."

getAll: SELECT * FROM tasks;

-- parameters are added to named queries like this:
getById: SELECT * FROM tasks WHERE id = :id;

deleteById: DELETE FROM tasks WHERE id = :id;

toggleDoneById: UPDATE tasks SET done = (not done) WHERE id = :id;